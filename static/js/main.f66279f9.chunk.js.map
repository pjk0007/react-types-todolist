{"version":3,"sources":["atoms.tsx","components/AddCategory.tsx","components/CategorySelect.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoCard.tsx","components/ToDoList.tsx","components/NavBar.tsx","App.tsx","index.tsx","theme.ts"],"names":["LocalToDo","categoriesDefault","categoriesState","atom","key","default","categoryState","toDoState","JSON","parse","localStorage","getItem","toDoSelector","selector","get","toDos","category","filter","toDo","style","position","top","left","transform","width","bgcolor","border","boxShadow","p","Form","styled","form","AddCategroy","React","useState","open","setOpen","useRecoilState","setCategories","handleClose","useForm","register","handleSubmit","setValue","Button","onClick","Modal","onClose","aria-labelledby","aria-describedby","Box","sx","Typography","id","variant","component","onSubmit","prev","TextField","required","label","m","type","CategorySelect","setCategory","categories","FormControl","fullWidth","InputLabel","Select","labelId","value","onChange","event","target","map","item","MenuItem","CreateToDo","setToDos","useRecoilValue","useEffect","setItem","stringify","text","Date","now","ToDo","useSetRecoilState","toDoLists","name","currentTarget","oldToDos","targetIndex","findIndex","newToDo","slice","ListItem","String","display","justifyContent","fontSize","ButtonGroup","aria-label","ToDoCard","Card","CardContent","align","fontWeight","gutterBottom","List","MainBox","div","ToDoList","NavBar","AppBar","Toolbar","GlobalStyle","createGlobalStyle","reset","App","ReactDOM","render","StrictMode","theme","bgColor","textColor","accentColor","document","getElementById"],"mappings":"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","file":"static/js/main.f66279f9.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nexport const LocalToDo = \"LocalToDo\";\r\nexport const LocalCategory = \"LocalCategory\";\r\n\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: string;\r\n}\r\n\r\nexport const categoriesDefault = [\"TO DO\", \"DOING\", \"DONE\"];\r\n\r\nexport const categoriesState = atom<string[]>({\r\n  key: \"categories\",\r\n  default: categoriesDefault,\r\n});\r\n\r\nexport const categoryState = atom<string>({\r\n  key: \"category\",\r\n  default: categoriesDefault[0],\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: JSON.parse(localStorage.getItem(LocalToDo) ?? \"[]\"),\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});\r\n","import { Button, Modal, TextField, Typography } from \"@mui/material\";\r\nimport { Box } from \"@mui/system\";\r\nimport styled from \"styled-components\";\r\nimport React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { categoriesState } from \"../atoms\";\r\n\r\ninterface IForm {\r\n  category: string;\r\n}\r\n\r\nconst style = {\r\n  position: \"absolute\" as \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"white\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  p: 4,\r\n};\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nfunction AddCategroy() {\r\n  const [open, setOpen] = React.useState(false);\r\n  const [categories, setCategories] = useRecoilState(categoriesState);\r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const handleValid = ({ category }: IForm) => {\r\n    setCategories((prev) => [...prev, category]);\r\n    setValue(\"category\", \"\");\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button onClick={handleOpen}>Add Category</Button>\r\n      <Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n          <Typography id=\"modal-modal-title\" variant=\"h6\" component=\"h2\">\r\n            Add Category\r\n          </Typography>\r\n          <Form onSubmit={handleSubmit(handleValid)}>\r\n            <TextField\r\n              {...register(\"category\", {\r\n                required: \"Please write a To Do\",\r\n              })}\r\n              id=\"category\"\r\n              label=\"Write your Category\"\r\n              variant=\"standard\"\r\n              sx={{ m: 1, width: \"100%\" }}\r\n            />\r\n            <Button type=\"submit\" variant=\"contained\">\r\n              Add\r\n            </Button>\r\n          </Form>\r\n        </Box>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AddCategroy;\r\n","import {\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  SelectChangeEvent,\r\n} from \"@mui/material\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { categoriesState, categoryState } from \"../atoms\";\r\n\r\nfunction CategorySelect() {\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const [categories, setCategories] = useRecoilState(categoriesState);\r\n  const onChange = (event: SelectChangeEvent) => {\r\n    setCategory(event?.target.value as any);\r\n  };\r\n\r\n  return (\r\n    <FormControl fullWidth>\r\n      <InputLabel id=\"category-input-label\">Category</InputLabel>\r\n      <Select\r\n        labelId=\"category-label\"\r\n        id=\"category\"\r\n        value={category}\r\n        onChange={onChange}\r\n      >\r\n        {categories.map((item: string) => {\r\n          return <MenuItem value={item}>{item}</MenuItem>;\r\n        })}\r\n        {/* <MenuItem value={Category.TO_DO}>{Category.TO_DO}</MenuItem>\r\n        <MenuItem value={Category.DOING}>{Category.DOING}</MenuItem>\r\n        <MenuItem value={Category.DONE}>{Category.DONE}</MenuItem> */}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default CategorySelect;\r\n","import styled from \"styled-components\";\r\nimport { Button, TextField } from \"@mui/material\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { categoryState, LocalToDo, toDoState } from \"../atoms\";\r\nimport { useEffect } from \"react\";\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nfunction CreateToDo() {\r\n  const [toDos, setToDos] = useRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    setToDos((prev) => [{ text: toDo, id: Date.now(), category }, ...prev]);\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n  useEffect(() => {\r\n    localStorage.setItem(LocalToDo, JSON.stringify(toDos));\r\n  }, [toDos]);\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit(handleValid)}>\r\n      <TextField\r\n        {...register(\"toDo\", {\r\n          required: \"Please write a To Do\",\r\n        })}\r\n        id=\"toDo\"\r\n        label=\"Write a to do\"\r\n        variant=\"standard\"\r\n        sx={{ m: 1, width: \"100%\" }}\r\n      />\r\n      <Button type=\"submit\" variant=\"contained\">\r\n        Add\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import { Button, ButtonGroup, ListItem, Typography } from \"@mui/material\";\r\nimport { useEffect } from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { IToDo, LocalToDo, toDoState } from \"../atoms\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const setToDos = useSetRecoilState(toDoState);\r\n  useEffect(() => {\r\n    const toDoLists = JSON.parse(localStorage.getItem(LocalToDo) ?? \"[]\");\r\n    setToDos(toDoLists);\r\n  }, []);\r\n\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = { text, id, category: name as any };\r\n\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        newToDo,\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n  const onDelete = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n  return (\r\n    <ListItem\r\n      id={String(id)}\r\n      sx={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n    >\r\n      <Typography sx={{ fontSize: 20 }}>\r\n        <Button sx={{ p: 0 }} onClick={onDelete}>\r\n          ❌\r\n        </Button>\r\n        {text}\r\n      </Typography>\r\n      <ButtonGroup\r\n        variant=\"contained\"\r\n        aria-label=\"moving category button group\"\r\n      >\r\n        {category !== \"TO DO\" && (\r\n          <Button variant=\"outlined\" name=\"TO_DO\" onClick={onClick}>\r\n            To Do\r\n          </Button>\r\n        )}\r\n        {category !== \"DOING\" && (\r\n          <Button variant=\"outlined\" name=\"DOING\" onClick={onClick}>\r\n            Doing\r\n          </Button>\r\n        )}\r\n        {category !== \"DONE\" && (\r\n          <Button variant=\"outlined\" name=\"DONE\" onClick={onClick}>\r\n            Done\r\n          </Button>\r\n        )}\r\n      </ButtonGroup>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import { Card, CardContent, Typography, List } from \"@mui/material\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { toDoSelector } from \"../atoms\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nfunction ToDoCard() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography\r\n          align=\"center\"\r\n          sx={{ fontWeight: 600, fontSize: 25 }}\r\n          gutterBottom\r\n        >\r\n          TO DO LIST\r\n        </Typography>\r\n        <List>\r\n          {toDos?.map((toDo) => (\r\n            <ToDo key={toDo.id} {...toDo} />\r\n          ))}\r\n        </List>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ToDoCard;\r\n","import styled from \"styled-components\";\r\nimport AddCategroy from \"./AddCategory\";\r\nimport CategorySelect from \"./CategorySelect\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDoCard from \"./ToDoCard\";\r\n\r\nconst MainBox = styled.div`\r\n  max-width: 500px;\r\n  width: 100vw;\r\n  margin: 5vh auto;\r\n`;\r\n\r\nfunction ToDoList() {\r\n  return (\r\n    <MainBox>\r\n      <CategorySelect />\r\n      <AddCategroy />\r\n      <CreateToDo />\r\n      <ToDoCard />\r\n    </MainBox>\r\n  );\r\n}\r\nexport default ToDoList;\r\n","import { AppBar, Toolbar, Typography } from \"@mui/material\";\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography variant=\"h4\">To Dos</Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\nimport ToDoList from \"./components/ToDoList\";\nimport NavBar from \"./components/NavBar\";\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n  ${reset}; \n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <NavBar />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from 'styled-components';\r\n\r\nexport const darkTheme:DefaultTheme = {\r\n    bgColor:\"#2f3640\",\r\n    textColor:\"black\",\r\n    accentColor:\"#9c88ff\",\r\n}\r\n\r\nexport const lightTheme:DefaultTheme = {\r\n    bgColor:\"#2f3640\",\r\n    textColor:\"black\",\r\n    accentColor:\"#9c88ff\",\r\n}"],"sourceRoot":""}