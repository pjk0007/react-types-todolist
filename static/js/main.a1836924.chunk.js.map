{"version":3,"sources":["atoms.tsx","components/CategorySelect.tsx","components/CreateToDo.tsx","components/ToDo.tsx","components/ToDoCard.tsx","components/ToDoList.tsx","components/NavBar.tsx","App.tsx","index.tsx","theme.ts"],"names":["Categories","LocalToDo","categoryState","atom","key","default","TO_DO","toDoState","JSON","parse","localStorage","getItem","toDoSelector","selector","get","toDos","category","filter","toDo","CategorySelect","useRecoilState","setCategory","FormControl","fullWidth","InputLabel","id","Select","labelId","value","onChange","event","target","MenuItem","DOING","DONE","Form","styled","form","CreateToDo","setToDos","useRecoilValue","useForm","register","handleSubmit","setValue","useEffect","setItem","stringify","onSubmit","prev","text","Date","now","TextField","required","label","variant","sx","m","width","Button","type","ToDo","toDoLists","onClick","name","currentTarget","oldToDos","targetIndex","findIndex","newToDo","slice","ListItem","String","display","justifyContent","Typography","fontSize","p","ButtonGroup","aria-label","ToDoCard","Card","CardContent","align","fontWeight","gutterBottom","List","map","MainBox","div","ToDoList","NavBar","AppBar","position","Toolbar","GlobalStyle","createGlobalStyle","reset","App","ReactDOM","render","StrictMode","theme","bgColor","textColor","accentColor","document","getElementById"],"mappings":"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","file":"static/js/main.a1836924.chunk.js","sourcesContent":["import { atom, selector } from \"recoil\";\r\n\r\nexport const LocalToDo = \"LocalToDo\";\r\n\r\nexport enum Categories {\r\n  \"TO_DO\" = \"TO_DO\",\r\n  \"DOING\" = \"DOING\",\r\n  \"DONE\" = \"DONE\",\r\n}\r\n\r\nexport interface IToDo {\r\n  text: string;\r\n  id: number;\r\n  category: Categories;\r\n}\r\n\r\nexport const categoryState = atom<Categories>({\r\n  key: \"category\",\r\n  default: Categories.TO_DO,\r\n});\r\n\r\nexport const toDoState = atom<IToDo[]>({\r\n  key: \"toDo\",\r\n  default: JSON.parse(localStorage.getItem(LocalToDo) ?? \"[]\"),\r\n});\r\n\r\nexport const toDoSelector = selector({\r\n  key: \"toDoSelector\",\r\n  get: ({ get }) => {\r\n    const toDos = get(toDoState);\r\n    const category = get(categoryState);\r\n\r\n    return toDos.filter((toDo) => toDo.category === category);\r\n  },\r\n});\r\n","import {\r\n  FormControl,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  SelectChangeEvent,\r\n} from \"@mui/material\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { Categories, categoryState } from \"../atoms\";\r\n\r\nfunction CategorySelect() {\r\n  const [category, setCategory] = useRecoilState(categoryState);\r\n  const onChange = (event: SelectChangeEvent) => {\r\n    setCategory(event?.target.value as any);\r\n  };\r\n\r\n  return (\r\n    <FormControl fullWidth>\r\n      <InputLabel id=\"category-input-label\">Category</InputLabel>\r\n      <Select\r\n        labelId=\"category-label\"\r\n        id=\"category\"\r\n        value={category}\r\n        onChange={onChange}\r\n      >\r\n        <MenuItem value={Categories.TO_DO}>{Categories.TO_DO}</MenuItem>\r\n        <MenuItem value={Categories.DOING}>{Categories.DOING}</MenuItem>\r\n        <MenuItem value={Categories.DONE}>{Categories.DONE}</MenuItem>\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n\r\nexport default CategorySelect;\r\n","import styled from \"styled-components\";\r\nimport { Button, TextField } from \"@mui/material\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useRecoilState, useRecoilValue } from \"recoil\";\r\nimport { categoryState, LocalToDo, toDoState } from \"../atoms\";\r\nimport { useEffect } from \"react\";\r\n\r\ninterface IForm {\r\n  toDo: string;\r\n}\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin-bottom: 30px;\r\n`;\r\n\r\nfunction CreateToDo() {\r\n  const [toDos, setToDos] = useRecoilState(toDoState);\r\n  const category = useRecoilValue(categoryState);\r\n  const { register, handleSubmit, setValue } = useForm<IForm>();\r\n  const handleValid = ({ toDo }: IForm) => {\r\n    setToDos((prev) => [{ text: toDo, id: Date.now(), category }, ...prev]);\r\n    setValue(\"toDo\", \"\");\r\n  };\r\n  useEffect(() => {\r\n    localStorage.setItem(LocalToDo, JSON.stringify(toDos));\r\n  }, [toDos]);\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit(handleValid)}>\r\n      <TextField\r\n        {...register(\"toDo\", {\r\n          required: \"Please write a To Do\",\r\n        })}\r\n        id=\"toDo\"\r\n        label=\"Write a to do\"\r\n        variant=\"standard\"\r\n        sx={{ m: 1, width: \"100%\" }}\r\n      />\r\n      <Button type=\"submit\" variant=\"contained\">\r\n        Add\r\n      </Button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default CreateToDo;\r\n","import { Button, ButtonGroup, ListItem, Typography } from \"@mui/material\";\r\nimport { useEffect } from \"react\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { Categories, IToDo, LocalToDo, toDoState } from \"../atoms\";\r\n\r\nfunction ToDo({ text, category, id }: IToDo) {\r\n  const [toDos, setToDos] = useRecoilState(toDoState);\r\n  useEffect(() => {\r\n    const toDoLists = JSON.parse(localStorage.getItem(LocalToDo) ?? \"[]\");\r\n    setToDos(toDoLists);\r\n  }, []);\r\n\r\n  const onClick = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    const {\r\n      currentTarget: { name },\r\n    } = event;\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n      const newToDo = { text, id, category: name as any };\r\n\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        newToDo,\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n  const onDelete = (event: React.MouseEvent<HTMLButtonElement>) => {\r\n    setToDos((oldToDos) => {\r\n      const targetIndex = oldToDos.findIndex((toDo) => toDo.id === id);\r\n\r\n      return [\r\n        ...oldToDos.slice(0, targetIndex),\r\n        ...oldToDos.slice(targetIndex + 1),\r\n      ];\r\n    });\r\n  };\r\n  return (\r\n    <ListItem\r\n      id={String(id)}\r\n      sx={{ display: \"flex\", justifyContent: \"space-between\" }}\r\n    >\r\n      <Typography sx={{ fontSize: 20 }}>\r\n        <Button sx={{ p: 0 }} onClick={onDelete}>\r\n          ‚ùå\r\n        </Button>\r\n        {text}\r\n      </Typography>\r\n      <ButtonGroup\r\n        variant=\"contained\"\r\n        aria-label=\"moving category button group\"\r\n      >\r\n        {category !== Categories.TO_DO && (\r\n          <Button variant=\"outlined\" name={Categories.TO_DO} onClick={onClick}>\r\n            To Do\r\n          </Button>\r\n        )}\r\n        {category !== Categories.DOING && (\r\n          <Button variant=\"outlined\" name={Categories.DOING} onClick={onClick}>\r\n            Doing\r\n          </Button>\r\n        )}\r\n        {category !== Categories.DONE && (\r\n          <Button variant=\"outlined\" name={Categories.DONE} onClick={onClick}>\r\n            Done\r\n          </Button>\r\n        )}\r\n      </ButtonGroup>\r\n    </ListItem>\r\n  );\r\n}\r\n\r\nexport default ToDo;\r\n","import { Card, CardContent, Typography, List } from \"@mui/material\";\r\nimport { useRecoilValue } from \"recoil\";\r\nimport { toDoSelector } from \"../atoms\";\r\nimport ToDo from \"./ToDo\";\r\n\r\nfunction ToDoCard() {\r\n  const toDos = useRecoilValue(toDoSelector);\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography\r\n          align=\"center\"\r\n          sx={{ fontWeight: 600, fontSize: 25 }}\r\n          gutterBottom\r\n        >\r\n          TO DO LIST\r\n        </Typography>\r\n        <List>\r\n          {toDos?.map((toDo) => (\r\n            <ToDo key={toDo.id} {...toDo} />\r\n          ))}\r\n        </List>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default ToDoCard;\r\n","import styled from \"styled-components\";\r\nimport CategorySelect from \"./CategorySelect\";\r\nimport CreateToDo from \"./CreateToDo\";\r\nimport ToDoCard from \"./ToDoCard\";\r\n\r\nconst MainBox = styled.div`\r\n  max-width: 500px;\r\n  width: 100vw;\r\n  margin: 5vh auto;\r\n`;\r\n\r\nfunction ToDoList() {\r\n  return (\r\n    <MainBox>\r\n      <CategorySelect />\r\n      <CreateToDo />\r\n      <ToDoCard />\r\n    </MainBox>\r\n  );\r\n}\r\nexport default ToDoList;\r\n","import { AppBar, Toolbar, Typography } from \"@mui/material\";\r\n\r\nfunction NavBar() {\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography variant=\"h4\">To Dos</Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default NavBar;\r\n","import { createGlobalStyle } from \"styled-components\";\nimport reset from \"styled-reset\";\nimport ToDoList from \"./components/ToDoList\";\nimport NavBar from \"./components/NavBar\";\n\nconst GlobalStyle = createGlobalStyle`\n  @import url('https://fonts.googleapis.com/css2?family=Source+Sans+Pro:wght@300;400&display=swap');\n  ${reset}; \n`;\n\nfunction App() {\n  return (\n    <>\n      <GlobalStyle />\n      <NavBar />\n      <ToDoList />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport { ThemeProvider } from \"styled-components\";\nimport App from \"./App\";\nimport { darkTheme } from \"./theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n      <ThemeProvider theme={darkTheme}>\n        <App />\n      </ThemeProvider>\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","import { DefaultTheme } from 'styled-components';\r\n\r\nexport const darkTheme:DefaultTheme = {\r\n    bgColor:\"#2f3640\",\r\n    textColor:\"black\",\r\n    accentColor:\"#9c88ff\",\r\n}\r\n\r\nexport const lightTheme:DefaultTheme = {\r\n    bgColor:\"#2f3640\",\r\n    textColor:\"black\",\r\n    accentColor:\"#9c88ff\",\r\n}"],"sourceRoot":""}